<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://docbook.org/xml/5.1/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.1/sch/docbook.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<chapter xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.1">
    <title>Procedural Knowledge Representation</title>
    <section>
        <title>Procedural Representation</title>
        <para>As with Assertional Knowledge, the representation of Procedural Knowledge reaches
            beyond the documentation of procedures requested or performed on the subject of record.
            Procedural Knowledge can pertain to, e.g. </para>
        <para>• Standard ways of performing a procedure</para>
        <para>• Treatment protocols for diseases</para>
        <para>• Standard evidence-based Order Sets</para>
        <para>Applied Procedural Knowledge can enable the use of
            <?oxy_comment_start author="steph" timestamp="20190507T125958-0600" comment="I don&apos;t think these need to be capitalized."?>Clinical
            Pathways, Clinical Decision Support and Knowledge Artifacts<?oxy_comment_end?> (KNARTs)
            that
            <?oxy_comment_start author="steph" timestamp="20190507T130127-0600" comment="It&apos;s not clear to me if this is referring only to KNART or clinical pathways, CDS, and KNARTs.  If all of them, then don&apos;t they standardize more than just documentation?"?>standardize
            patient documentation<?oxy_comment_end?> focused on clinical domains and patient
            situations.</para>
    </section>
    <section>
        <title>Examples</title>
        <para>KNARTs</para>
        <para>Third party vendor products</para>
        <para>Treatment Protocols - Million Hearts</para>
        <para>Procedure Guidelines - SNMMI.org</para>
    </section>
    <section>
        <title>Historical Context for Representing the Expression Logic of Clinical Decision
            Support</title>
        <para>While there have been advancements in implementing clinical data standards intending
            to provide rules to allow for the exchange, integration, and management of electronic
            clinical information, there is still room to improve portability of eCQM queries and CDS
            implementations across sites. Different health care institutions may increasingly have
            their clinical data encoded according to standards-based terminologies, but each site
            will still require human intervention and hand-crafted implementations of eCQMs and
            computerized CDS including patient safety alerts, and health maintenance reminders
            intended to improve eCQM performance scores and population health. One implementation of
            an eCQM at the Veterans Health Administration, for instance, is not completely
            transferrable to another institution; analysts at each organization will have to modify
            the underlying query which might be in Structured Query Language (SQL) for instance so
            that it is computable against their respective clinical database structure. Furthermore,
            all eCQM concepts are not recorded in the same way in different EHR implementations;
            what may be structured in one system may be free text in another. While HQMF, QDM, and
            CQL are the more recent efforts to improve standard representations of eCQM and CDS
            expression logic, the efforts date back to the mid 1970’s when early implementers of
            computer-based clinical information systems were first recognizing the value of
            computer-based decision support into their designs. </para>
        <para>Notably, Clem McDonald’s work on the Regenstrief Medical Record System exemplifies
            important early work in pseudocode logic expression. McDonald realized that the number
            of CDS reminders and alerts would quickly increase, so rather than hand-crafting each
            rule into computer code with programmers, he created one of the first CDS rule languages
            called CARE (McCallie DP. Healthcare information management systems: cases, strategies,
            and solutions. Cham: Springer; 2016.). The CARE language allowed clinical experts and
            those without programming expertise to structure if-then logic of alerts using a
            flexible scripting language that could be interpreted by programmers to implement
            against the patient record system. As computerized EHRs continued to spread to other
            academic medical centers in the years that followed, it became clear that a standard way
            to replicate the expression logic of CARE-style if-then decision rules would be needed.
            In the late 1980s, informaticists at Columbia led an important initiative to standardize
            CDS scripting language and created the Arden Syntax or Medical Logic Modules, the goal
            of which was to encode if-then-else rules in a standard format that could be computed
            against different EHR systems, regardless of the location or specific vendor. Arden
            Syntax logic modules were novel in that they consisted of standard sections called
            ‘categories’, and each category contained several ‘slots’. For instance, the ‘logic’
            slot contained the actual clinical logic of a rule, and the ‘action’ slot defined the
            message that the rule would display to the clinician-user. Modern EHRs often still use
            this framework even if the full Arden Syntax is not used: when a clinician’s workflow
            reaches a trigger point, then a rule in the system is fired, and evaluates the clinical
            logic attached to the trigger point. (McCallie DP. Healthcare information management
            systems: cases, strategies, and solutions. Cham: Springer; 2016.)</para>
        <para>By the mid 1990’s, CDS rules using the Arden Syntax began to spread to numerous
            commercial systems, however dissemination was limited in that rules written in one
            facility would not run against any other system. While the ‘logic’ slot contained
            machine-executable if-then-else code, there was also a ‘curly brace’ part of the syntax
            that only contained a human-readable textual description of the database process and
            actions necessary for the rule to access clinical data in the EHR. This required
            human-interpretation and hand-crafting at each specific site and this challenge was
            referred to as the “curly brace problem”. (McCallie DP. Healthcare information
            management systems: cases, strategies, and solutions. Cham: Springer; 2016.) This
            challenge to achieve portability across environments has persisted throughout the 1990s
            to 2000s to the current day. These challenges were only worsened when guideline-based
            techniques were introduced attempting to separate clinical problems into a series of
            linked clinical decisions. There were some notable efforts such as Guideline Interchange
            Format (GLIF), PROforma, SAGE, and GEM, which aimed to incorporate a guideline’s logic
            into the executable part of decision logic, however these languages suffered due to a
            lack of maturity of standards to integrate the guideline engines into EHRs
            directly.(McCallie DP. Healthcare information management systems: cases, strategies, and
            solutions. Cham: Springer; 2016.)</para>
        <para>In 1998, HL7 found the “curly brace” problem to be unsolvable by the Arden approach
            and began efforts to create expression logic standards based on HL7 Version 3 Reference
            Information Model (RIM).(HL7 Version 3: Reference Information Model (RIM) [Internet].
            Introduction to HL7 Standards. [cited 2018Aug28]. Available from:
            http://www.hl7.org/implement/standards/product_brief.cfm?product_id=77.) One attempt was
            the GELLO Expression Language, which in theory was supposed to access and manipulate
            clinical data by common clinical entities; however RIM was not proven to be a very
            practical representation of the complexity of real-world data. Only a small number of
            vendors were successfully able to implement RIM-based EHRs and therefore the vision of
            GELLO and HL7 V3 efforts remained unproven. In 2013, HL7 replaced GELLO with ECA
            (“Event, Condition, Action”), an expression in XML data structures intended to abstract
            the representation of expression logic. Shortly thereafter, the standards community
            realized the benefit in aligning CDS logic expression with those of eCQMs as the goals
            of CDS rules are often used to prompt clinicians to achieve improved clinical quality
            outcomes, and therefore HL7 defined QUICK – the Quality Improvement and Clinical
            Knowledge model. (QUICK Data Model [Internet]. QUICK Data Model. HL7; [cited 2018Aug28].
            Available from: https://www.hl7.org/FHIR/2015May/quick/help.html.) QUICK and ECA have
            now been wrapped up into Clinical Quality Language (CQL) which attempts to capture
            lessons learned from Arden, GELLO, and ECA. </para>
        <para>An emerging Health Level Seven (HL7) International standard that might help with
            electronic processing of eCQM and CDS logic is the Clinical Quality Language (CQL), a
            new specification that focuses on a common model for representing expression logic for
            CQMs and Clinical Decision Support. According to CMS’ eCQI Resource Center, CQL will be
            used in all quality measure specifications in the future, will replace the Quality Data
            Model, and is intended to reduce the burden on implementers for consuming measure
            artifacts. CQL representations of eCQMs will replace the QDM pseudocode historically
            published in HQMF files; it aims to provide a human-readable, conceptual-level language
            to define eCQMs and clinical decision support independent of specific data models, such
            as the QDM or FHIR (Fast Healthcare Interoperability Resource). </para>
        <para>CMS is rapidly rolling out the CQL standard in its eCQMs for the 2019 reporting year.
            The goal of CQL moving forward is to use emerging Application Programming Interfaces
            like the Fast Healthcare Interoperability Resource (FHIR) as way to allow for more
            direct access to clinical data that does not require the overhead of RIM mapping. (
            Jiang G, Prud’Hommeax E, Solbrig H. Developing A Semantic Web-based Framework for
            Executing the Clinical Quality Language Using FHIR. Proceedings of SWAT4LS Workshop.
            Avalailable from: <link
                xlink:href="file:///C:/Users/dorrd/AppData/Local/Microsoft/Windows/Temporary%20Internet%20Files/Content.Outlook/RNPDTQSM/www.swat4ls.org/wp-content/uploads/2017/11/SWAT4LS-2017_paper_40.pdf"
                >www.swat4ls.org/wp-content/uploads/2017/11/SWAT4LS-2017_paper_40.pdf</link>.) The
            potential for FHIR and CQL in CDS and eCQM implementations remains to be seen, however,
            the community is optimistic. </para>
        <para> </para>
    </section>
   
</chapter>
